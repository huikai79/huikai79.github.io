name: Sync Notion → Build → Deploy → Purge Cache

# ───────────── 觸發條件 ─────────────
on:
  push:                 # 手動 git push 可立即觸發
    branches: [main]
  workflow_dispatch:    # GitHub UI → Run workflow
  schedule:             # 每 6 小時自動同步（UTC）
    - cron: '0 */6 * * *'

# 必要權限
permissions:
  contents: write
  pages:    write
  id-token: write

# 同時間只跑一個
concurrency:
  group: pages
  cancel-in-progress: true

# ───────────── Job ①：Build ─────────────
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    # 1 取代碼（含主題子模組）
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2 建立 Node 環境（不啟用 npm cache，避免 lockfile 警告）
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    # 3 Notion → Markdown
    # 3️⃣ Notion → Markdown
    - name: Sync Notion database to content/posts
      env:
        NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}
      run: |
        # 安装依赖（本地，不要 -g）
        npm install --no-save '@notionhq/client@^2.3.0' 'notion-to-md@^2.4.0'

        # 生成同步脚本
        cat <<'EOF' > sync.mjs
        import { Client } from "@notionhq/client";
        import { NotionToMarkdown } from "notion-to-md";
        import fs from "node:fs/promises";
        import path from "node:path";

        const notion = new Client({ auth: process.env.NOTION_TOKEN });
        const n2m    = new NotionToMarkdown({ notionClient: notion });
        const db     = process.env.NOTION_DATABASE_ID;
        const outDir = "content/posts";

        async function sync() {
          await fs.rm(outDir, { recursive: true, force: true });
          await fs.mkdir(outDir, { recursive: true });

          const filter = { property: "status", status: { equals: "Published" } };

          let cursor = undefined;
          do {
            const resp = await notion.databases.query({
              database_id: db,
              filter,
              start_cursor: cursor,
              page_size: 100,
            });

            for (const page of resp.results) {
              const title = page.properties.Title.title[0]?.plain_text ?? "Untitled";
              const slug  = page.properties.slug.rich_text[0]?.plain_text;
              const date  = page.properties.date.date?.start;
              const tags  = page.properties.tags.multi_select.map(t => t.name);
              if (!slug) continue;

              const md = n2m.toMarkdownString(await n2m.pageToMarkdown(page.id));
              const front = `---\ntitle: "${title.replace(/"/g,'\\"')}"\ndate: ${date}\nslug: "${slug}"\ntags: [${tags.map(t=>`"${t}"`).join(", ")}]\n---\n\n`;
              await fs.writeFile(path.join(outDir, `${slug}.md`), front + md.parent);
            }
            cursor = resp.has_more ? resp.next_cursor : undefined;
          } while (cursor);
        }

        sync().catch(err => { console.error(err); process.exit(1); });
        EOF

        # 执行脚本
        node sync.mjs


    # 4 轉檔 HEIC → JPEG
    - name: Convert HEIC/HEIF images
      run: |
        sudo apt-get update -y
        sudo apt-get install -y imagemagick libheif-examples
        find ./static -type f \( -iname '*.heic' -o -iname '*.heif' \) -print0 |
        while IFS= read -r -d '' f; do
          convert "$f" "${f%.*}.jpeg" && rm "$f"
        done
        find ./content/posts -name '*.md' -exec sed -i 's/\.\(heic\|heif\)/.jpeg/gi' {} +

    # 5 合併 Blowfish 額外覆寫
    - name: Merge Blowfish overrides
      run: |
        cp -rT themes/blowfish/layouts/ layouts/
        cp -rT themes/blowfish/assets/  assets/

    # 6 安裝 Hugo
    - uses: peaceiris/actions-hugo@v3.0.0
      with:
        hugo-version: 0.124.1
        extended: true

    # 7 构建
    - run: hugo --minify

    # 8 上傳靜態檔
    - uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

# ───────────── Job ②：Deploy ─────────────
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}

    steps:
      # 9 發布
      - id: deployment
        uses: actions/deploy-pages@v4

      # 10 刷新 Cloudflare 快取（列常用頁面，避免權限需求）
      - name: Purge Cloudflare cache (files)
        if: success()
        env:
          CF_ZONE_ID:    ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CF_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          FILES='["https://huikai.com.kg/","https://huikai.com.kg/index.html","https://huikai.com.kg/sitemap.xml","https://huikai.com.kg/index.xml"]'
          curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
               -H "Authorization: Bearer ${CF_API_TOKEN}" \
               -H "Content-Type: application/json" \
               --data "{\"files\":${FILES}}" \
          | jq -e '.success' >/dev/null
