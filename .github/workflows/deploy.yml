name: Sync Notion and Deploy to Pages (Final - Submodule Method)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# 设置权限
permissions:
  contents: write 
  pages: write
  id-token: write

# 设置并发
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 第 1 步：拉取代码，并递归拉取主题子模块
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive # 这一步会确保 themes/blowfish 文件夹里有完整的主题代码

      # 第 2 步：使用 Node.js 脚本从 Notion 同步
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create and run sync script
        run: |
          # 安装依赖
          npm install @notionhq/client notion-to-md
          
          # 创建脚本并立即运行
          cat <<'EOF' | node -
          const { Client } = require("@notionhq/client");
          const { NotionToMarkdown } = require("notion-to-md");
          const fs = require("fs/promises");
          const path = require("path");

          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m = new NotionToMarkdown({ notionClient: notion });
          const databaseId = process.env.NOTION_DATABASE_ID;
          const outputDir = "content/posts";

          async function sync() {
            console.log("Fetching pages from Notion database...");
            const response = await notion.databases.query({
              database_id: databaseId,
              filter: { property: "status", select: { "equals": "Published" } },
            });

            console.log(`Found ${response.results.length} pages to sync.`);
            await fs.mkdir(outputDir, { recursive: true });

            for (const page of response.results) {
              try {
                const title = page.properties.Title.title[0]?.plain_text || 'Untitled';
                const slug = page.properties.slug.rich_text[0]?.plain_text;
                const date = page.properties.date.date?.start;
                const tags = page.properties.tags.multi_select.map(tag => tag.name);

                if (!slug) {
                  console.warn(`Skipping page "${title}" because it has no slug.`);
                  continue;
                }
                console.log(`Processing: ${title}`);
                const mdblocks = await n2m.pageToMarkdown(page.id);
                const mdString = n2m.toMarkdownString(mdblocks);
                const frontmatter = `---
          title: "${title.replace(/"/g, '\\"')}"
          date: ${date}
          slug: "${slug}"
          tags: [${tags.map(t => `"${t}"`).join(', ')}]
          ---
          `;
                const finalContent = frontmatter + "\n" + mdString.parent;
                const outputPath = path.join(outputDir, `${slug}.md`);
                await fs.writeFile(outputPath, finalContent);
                console.log(`Successfully created ${outputPath}`);
              } catch (error) {
                console.error(`Failed to process page ID ${page.id}:`, error.message);
              }
            }
          }
          sync().catch(console.error);
          EOF
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}

      # 第 3 步：安装 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true 

      # 第 4 步：构建 Hugo 网站
      # 我们不再需要任何 hugo mod 命令了！
      - name: Build
        run: hugo --minify

      # 第 5 步：上传构建好的网站工件
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
