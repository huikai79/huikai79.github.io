name: Sync, Convert Images, Deploy, and Purge Cache

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '*/20 * * * *' # Run every 20 minutes

# Set global permissions
permissions:
  contents: write
  pages: write
  id-token: write

# Set concurrency to prevent multiple runs at once
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # --- BUILD JOB ---
  # Prepares content, converts images, and builds the static site
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out your repository code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Step 2: Setup Node.js and sync content from Notion
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create and run sync script
        run: |
          npm install @notionhq/client notion-to-md
          cat <<'EOF' | node -
          const { Client } = require("@notionhq/client");
          const { NotionToMarkdown } = require("notion-to-md");
          const fs = require("fs/promises");
          const path = require("path");

          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m = new NotionToMarkdown({ notionClient: notion });
          const databaseId = process.env.NOTION_DATABASE_ID;
          const outputDir = "content/posts";

          async function sync() {
            console.log(`Ensuring a clean sync by removing old content from ${outputDir}...`);
            await fs.rm(outputDir, { recursive: true, force: true });
            await fs.mkdir(outputDir, { recursive: true });

            console.log("Fetching pages from Notion database...");
            const response = await notion.databases.query({
              database_id: databaseId,
              filter: { property: "status", select: { "equals": "Published" } },
            });

            console.log(`Found ${response.results.length} pages to sync.`);

            for (const page of response.results) {
              try {
                const title = page.properties.Title.title[0]?.plain_text || 'Untitled';
                const slug = page.properties.slug.rich_text[0]?.plain_text;
                const date = page.properties.date.date?.start;
                const tags = page.properties.tags.multi_select.map(tag => tag.name);

                if (!slug) {
                  console.warn(`Skipping page "${title}" because it has no slug.`);
                  continue;
                }
                console.log(`Processing: ${title}`);
                const mdblocks = await n2m.pageToMarkdown(page.id);
                const mdString = n2m.toMarkdownString(mdblocks);
                const frontmatter = `---
          title: "${title.replace(/"/g, '\\"')}"
          date: ${date}
          slug: "${slug}"
          tags: [${tags.map(t => `"${t}"`).join(', ')}]
          ---
          `;
                const finalContent = frontmatter + "\n" + mdString.parent;
                const outputPath = path.join(outputDir, `${slug}.md`);
                await fs.writeFile(outputPath, finalContent);
                console.log(`Successfully created ${outputPath}`);
              } catch (error) {
                console.error(`Failed to process page ID ${page.id}:`, error.message);
              }
            }
          }
          sync().catch(console.error);
          EOF
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}

      # Step 3: Install conversion tools and convert HEIC images
      - name: Install ImageMagick and Convert HEIC Images
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick libheif-examples
          echo "Searching for HEIC files in ./static..."
          find ./static -type f \( -iname "*.heic" -o -iname "*.heif" \) -print0 | while IFS= read -r -d $'\0' file; do
            new_file="${file%.*}.jpeg"
            echo "Converting '$file' to '$new_file'..."
            convert "$file" "$new_file"
            rm "$file"
          done
          echo "HEIC conversion complete."

      # Step 4: Update image links in Markdown files
      - name: Update Image Links in Markdown
        run: |
          echo "Updating image links in markdown files..."
          find ./content/posts -type f -name "*.md" -exec sed -i 's/\.heic/.jpeg/gi' {} +
          find ./content/posts -type f -name "*.md" -exec sed -i 's/\.HEIC/.jpeg/gi' {} +
          echo "Image link updates complete."

      # Step 5: Merge theme files into the root
      - name: Merge theme files
        run: |
          cp -rT themes/blowfish/layouts/ layouts/
          cp -rT themes/blowfish/assets/ assets/

      # Step 6: Install Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      # Step 7: Build the site with Hugo
      - name: Build Site
        run: hugo --minify

      # Step 8: Check build output to debug artifact error
      - name: Check build output
        run: |
          echo "Listing files in the current directory to find the build output folder:"
          ls -R

      # Step 9: Upload the built site as an artifact for deployment
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # This path should point to your Hugo build output directory.
          # The default is 'public'. If the step above shows a different folder, change it here.
          path: ./public

  # --- DEPLOY JOB ---
  # Deploys the site to GitHub Pages and purges the Cloudflare cache
  deploy:
    # This job depends on the 'build' job finishing successfully
    needs: build
    # Define the deployment environment for GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Step 2: Purge the Cloudflare cache (Corrected for v3.1.0)
      - name: Purge Cloudflare Cache
        uses: nathanvaughn/actions-cloudflare-purge@v3.1.0
        env:
          # This action version reads configuration from environment variables
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
