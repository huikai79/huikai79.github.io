name: Notion Sync → Hugo Build → GitHub Pages + Cloudflare Purge

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取源码 + 主题子模块
      - name: Checkout repo and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. Node.js for Notion Sync
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Notion → Markdown
      - name: Sync Notion database to content/posts
        env:
          NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}
        run: |
          npm install --no-save '@notionhq/client@^2.3.0' 'notion-to-md@^2.4.0'
          cat <<'EOF' > sync.mjs
          import { Client } from "@notionhq/client";
          import { NotionToMarkdown } from "notion-to-md";
          import fs from "node:fs/promises";
          import path from "node:path";

          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m = new NotionToMarkdown({ notionClient: notion });
          const databaseId = process.env.NOTION_DATABASE_ID;
          const outputDir = "content/posts";

          async function sync() {
            await fs.rm(outputDir, { recursive: true, force: true });
            await fs.mkdir(outputDir, { recursive: true });

            const response = await notion.databases.query({
              database_id: databaseId,
              filter: { property: "status", select: { equals: "Published" } }
            });

            for (const page of response.results) {
              const title = page.properties.Title.title[0]?.plain_text || 'Untitled';
              const slug = page.properties.slug.rich_text[0]?.plain_text;
              const date = page.properties.date.date?.start;
              const tags = page.properties.tags.multi_select.map(tag => tag.name);

              if (!slug) continue;

              const mdblocks = await n2m.pageToMarkdown(page.id);
              const mdString = n2m.toMarkdownString(mdblocks);
              const frontmatter = `---
title: "${title.replace(/"/g, '\\"')}"
date: ${date}
slug: "${slug}"
tags: [${tags.map(t => `"${t}"`).join(', ')}]
---`;

              const finalContent = frontmatter + "\n" + mdString.parent;
              await fs.writeFile(path.join(outputDir, `${slug}.md`), finalContent);
            }
          }

          sync().catch(err => {
            console.error("❌ Notion Sync Error:", err);
            process.exit(1);
          });
          EOF

          node sync.mjs

      # 4-a. 安装转换工具
      - name: Install HEIC → JPEG tools
        run: |
          sudo apt-get update
          sudo apt-get -y install imagemagick libheif-examples

      # 4-b. 下载远端 HEIC 并转换为 JPEG
      - name: Download and convert remote HEIC images
        run: |
          mkdir -p static/uploads
          grep -rhoE 'https[^ )]+\.heic|https[^ )]+\.heif' content/posts | sort -u > /tmp/heic_urls.txt || true

          while read -r URL; do
            FILE="static/uploads/$(basename "${URL%.*}").jpeg"
            echo "Downloading $URL → $FILE"
            curl -L --silent "$URL" | convert heic:- "$FILE"
          done < /tmp/heic_urls.txt

          # 修改 Markdown 中的外链路径
          find content/posts -name '*.md' -exec \
            sed -i -E 's#https[^ )]+/(.+)\.hei[cf]#/uploads/\1.jpeg#g' {} +

      # 5. 合并主题文件
      - name: Merge Blowfish theme overrides
        run: |
          cp -rT themes/blowfish/layouts/ layouts/
          cp -rT themes/blowfish/assets/ assets/

      # 6. 安装 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 0.124.1
          extended: true

      # 7. 构建网站
      - name: Build site
        run: hugo --minify

      # 8. 上传构建产物
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 清理 Cloudflare Cache
      - name: Purge Cloudflare Cache
        if: ${{ success() }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
