name: Sync Notion → Build → Deploy → Purge Cache

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'   # 每 6 小時自動同步

permissions:
  contents: write
  pages:    write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

# ──────────────────────── ① Build ────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 取得程式碼（含子模組）
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2️⃣ 建立 Node 環境並快取 npm
      - name: Setup Node.js (with cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 3️⃣ Notion → Markdown 同步
      - name: Sync Notion database to content/posts
        run: |
          npm install -g '@notionhq/client@^2.3.0' 'notion-to-md@^2.4.0'

          cat <<'EOF' > sync-notion.mjs
          import { Client } from "@notionhq/client";
          import { NotionToMarkdown } from "notion-to-md";
          import fs from "node:fs/promises";
          import path from "node:path";

          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m   = new NotionToMarkdown({ notionClient: notion });
          const db    = process.env.NOTION_DATABASE_ID;
          const out   = "content/posts";

          const { results } = await notion.databases.query({
            database_id: db,
            filter: { property: "status", select: { equals: "Published" } },
          });

          console.log(`同步 ${results.length} 篇文章…`);
          await fs.rm(out, { recursive: true, force: true });
          await fs.mkdir(out, { recursive: true });

          for (const page of results) {
            const title = page.properties.Title.title[0]?.plain_text ?? "Untitled";
            const slug  = page.properties.slug.rich_text[0]?.plain_text;
            const date  = page.properties.date.date?.start;
            const tags  = page.properties.tags.multi_select.map(t => t.name);

            if (!slug) continue;

            const mdBlocks = await n2m.pageToMarkdown(page.id);
            const md       = n2m.toMarkdownString(mdBlocks);

            const front = `---\n`
                        + `title: "${title.replace(/"/g, '\\"')}"\n`
                        + `date: ${date}\n`
                        + `slug: "${slug}"\n`
                        + `tags: [${tags.map(t => `"${t}"`).join(", ")}]\n`
                        + `---\n\n`;

            await fs.writeFile(path.join(out, `${slug}.md`), front + md.parent);
          }
          EOF

          node sync-notion.mjs
        env:
          NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}   # 對應現有 Secret

      # 4️⃣ 轉檔 HEIC → JPEG
      - name: Convert HEIC/HEIF images to JPEG
        run: |
          sudo apt-get update
          sudo apt-get -y install imagemagick libheif-examples

          find ./static -type f \( -iname '*.heic' -o -iname '*.heif' \) -print0 |
          while IFS= read -r -d '' f; do
            echo "Converting $f"
            convert "$f" "${f%.*}.jpeg"
            rm "$f"
          done

          # 更新 Markdown 內連結
          find ./content/posts -name '*.md' -exec sed -i 's/\.\(heic\|heif\)/.jpeg/gi' {} +

      # 5️⃣ 合併 Blowfish 額外覆寫檔
      - name: Merge Blowfish theme overrides
        run: |
          cp -rT themes/blowfish/layouts/ layouts/
          cp -rT themes/blowfish/assets/  assets/

      # 6️⃣ 安裝 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3.0.0   # ← 已改為存在的版本
        with:
          hugo-version: 0.124.1
          extended: true

      # 7️⃣ 建置網站
      - name: Build site
        run: hugo --minify

      # 8️⃣ 上傳產物供下一 Job 使用
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

# ──────────────────────── ② Deploy ────────────────────────
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}

    steps:
      # 9️⃣ 發布到 GitHub Pages
      - name: Deploy to GitHub Pages
        id:   deployment
        uses: actions/deploy-pages@v4

      # 🔟 刷新 Cloudflare 快取
      - name: Purge Cloudflare cache
        if: success()
        env:
          CLOUDFLARE_ZONE_ID:    ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
               -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
               -H "Content-Type: application/json" \
               --data '{"purge_everything":true}' \
          | jq -e '.success' >/dev/null
