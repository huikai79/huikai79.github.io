name: Sync Notion → Build → Deploy → Purge Cache

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'   # 每 6 小时自动同步

permissions:
  contents: write
  pages:    write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

# ──────────────── ① Build ────────────────
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js (with cache)
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm

    - name: Sync Notion database to content/posts
      run: |
        npm install -g '@notionhq/client@^2.3.0' 'notion-to-md@^2.4.0'

        cat <<'EOF' > sync-notion.mjs
        import { Client } from "@notionhq/client";
        import { NotionToMarkdown } from "notion-to-md";
        import fs from "node:fs/promises";
        import path from "node:path";

        const notion = new Client({ auth: process.env.NOTION_TOKEN });
        const n2m   = new NotionToMarkdown({ notionClient: notion });
        const db    = process.env.NOTION_DATABASE_ID;
        const out   = "content/posts";

        const { results } = await notion.databases.query({
          database_id: db,
          filter: { property: "status", select: { equals: "Published" } },
        });

        console.log(`同步 ${results.length} 篇文章…`);
        await fs.rm(out, { recursive: true, force: true });
        await fs.mkdir(out, { recursive: true });

        for (const page of results) {
          const title = page.properties.Title.title[0]?.plain_text ?? "Untitled";
          const slug  = page.properties.slug.rich_text[0]?.plain_text;
          const date  = page.properties.date.date?.start;
          const tags  = page.properties.tags.multi_select.map(t => t.name);

          if (!slug) continue;

          const mdBlocks = await n2m.pageToMarkdown(page.id);
          const md       = n2m.toMarkdownString(mdBlocks);

          const front = `---\n`
                      + `title: "${title.replace(/"/g, '\\"')}"\n`
                      + `date: ${date}\n`
                      + `slug: "${slug}"\n`
                      + `tags: [${tags.map(t => `"${t}"`).join(", ")}]\n`
                      + `---\n\n`;

          await fs.writeFile(path.join(out, `${slug}.md`), front + md.parent);
        }
        EOF

        node sync-notion.mjs
      env:
        NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}   # ← 使用现成 Secret 名称

    - name: Convert HEIC/HEIF images to JPEG
      run: |
        sudo apt-get update
        sudo apt-get -y install imagemagick libheif-examples

        find ./static -type f \( -iname '*.heic' -o -iname '*.heif' \) -print0 |
        while IFS= read -r -d '' f; do
          echo "Converting $f"
          convert "$f" "${f%.*}.jpeg"
          rm "$f"
        done

        # 替换 Markdown 内的扩展名
        find ./content/posts -name '*.md' -exec sed -i 's/\.\(heic\|heif\)/.jpeg/gi' {} +

    - name: Merge Blowfish theme overrides
      run: |
        cp -rT themes/blowfish/layouts/ layouts/
        cp -rT themes/blowfish/assets/  assets/

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3.3.0
      with:
        hugo-version: 0.124.1   # 固定版本
        extended: true

    - name: Build site
      run: hugo --minify

    - name: Upload build artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

# ──────────────── ② Deploy ────────────────
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Purge Cloudflare cache
      if: success()
      env:
        CLOUDFLARE_ZONE_ID:    ${{ secrets.CLOUDFLARE_ZONE_ID }}     # ← 直接引用你的 Secret 名称
        CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
             -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}' \
        | jq -e '.success' >/dev/null
