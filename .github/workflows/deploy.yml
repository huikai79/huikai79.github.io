name: Sync Notion → Build → Deploy → Purge Cache

# ───────────── 触发条件 ─────────────
on:
  push:
    branches: [main]            # 手动 git push 可立即触发
  workflow_dispatch:            # GitHub UI 手动执行
  schedule:                     # 每 6 小时自动同步（UTC）
    - cron: '0 */6 * * *'

permissions:
  contents: write
  pages:    write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

# ───────────── Job ①：Build ─────────────
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1 取得代码（含 Blowfish 子模块）
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2 建立 Node 环境
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    # 3 Notion → Markdown
    - name: Sync Notion database to content/posts
      env:
        NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}
      run: |
        # 安装依赖（本地，不要 -g）
        npm install --no-save '@notionhq/client@^2.3.0' 'notion-to-md@^2.4.0'

        # 写入同步脚本
        cat <<'EOF' > sync.mjs
        import { Client } from "@notionhq/client";
        import { NotionToMarkdown } from "notion-to-md";
        import fs from "node:fs/promises";
        import path from "node:path";

        const notion = new Client({ auth: process.env.NOTION_TOKEN });
        const n2m    = new NotionToMarkdown({ notionClient: notion });
        const db     = process.env.NOTION_DATABASE_ID;
        const outDir = "content/posts";

        async function sync() {
          await fs.rm(outDir, { recursive: true, force: true });
          await fs.mkdir(outDir, { recursive: true });

          // 你的 status 栏位是 “Select” 类型
          const filter = { property: "status", select: { equals: "Published" } };

          let cursor = undefined;
          let total  = 0;

          do {
            const resp = await notion.databases.query({
              database_id: db,
              filter,
              start_cursor: cursor,
              page_size: 100,
            });

            console.log(`Fetched ${resp.results.length} pages (cursor: ${cursor || "first"})`);
            total += resp.results.length;

            for (const page of resp.results) {
              const title = page.properties.Title.title[0]?.plain_text ?? "Untitled";
              const slug  = page.properties.slug.rich_text[0]?.plain_text;
              const date  = page.properties.date.date?.start;
              const tags  = page.properties.tags.multi_select.map(t => t.name);

              if (!slug) {
                console.warn(`Skipping "${title}" (no slug)`);
                continue;
              }

              const mdBlocks = await n2m.pageToMarkdown(page.id);
              const md       = n2m.toMarkdownString(mdBlocks);

              const front = `---\n`
                          + `title: "${title.replace(/"/g,'\\"')}"\n`
                          + `date: ${date}\n`
                          + `slug: "${slug}"\n`
                          + `tags: [${tags.map(t=>`"${t}"`).join(", ")}]\n`
                          + `---\n\n`;

              await fs.writeFile(
                path.join(outDir, `${slug}.md`),
                front + md.parent
              );
            }

            cursor = resp.has_more ? resp.next_cursor : undefined;
          } while (cursor);

          console.log(`Total synced: ${total} pages`);
        }

        sync().catch(err => { console.error(err); process.exit(1); });
        EOF

        # 执行同步脚本
        node sync.mjs

    # 4 转 HEIC → JPEG
    - name: Convert HEIC/HEIF images
      run: |
        sudo apt-get update -y
        sudo apt-get install -y imagemagick libheif-examples
        find ./static -type f \( -iname '*.heic' -o -iname '*.heif' \) -print0 |
        while IFS= read -r -d '' f; do
          convert "$f" "${f%.*}.jpeg" && rm "$f"
        done
        find ./content/posts -name '*.md' -exec sed -i 's/\.\(heic\|heif\)/.jpeg/gi' {} +

    # 5 合并 Blowfish 覆盖
    - name: Merge Blowfish overrides
      run: |
        cp -rT themes/blowfish/layouts/ layouts/
        cp -rT themes/blowfish/assets/  assets/

    # 6 安装 Hugo
    - uses: peaceiris/actions-hugo@v3.0.0
      with:
        hugo-version: 0.124.1
        extended: true

    # 7 构建网站
    - run: hugo --minify

    # 8 上传静态文件
    - uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

# ───────────── Job ②：Deploy ─────────────
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}

    steps:
      # 9 发布到 GitHub Pages
      - id: deployment
        uses: actions/deploy-pages@v4

      # 10 精准清 Cloudflare 快取
      - name: Purge Cloudflare cache (files)
        if: success()
        env:
          CF_ZONE_ID:   ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          FILES='[
            "https://huikai.com.kg/",
            "https://huikai.com.kg/index.html",
            "https://huikai.com.kg/sitemap.xml",
            "https://huikai.com.kg/index.xml"
          ]'
          curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
               -H "Authorization: Bearer ${CF_API_TOKEN}" \
               -H "Content-Type: application/json" \
               --data "{\"files\":${FILES}}" \
          | jq -e '.success' >/dev/null
