name: Sync, Convert Images, Deploy, and Purge Cache (Final)

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '*/20 * * * *' # 每 20 分钟运行一次

# 设置权限
permissions:
  contents: write 
  pages: write
  id-token: write

# 设置并发
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 第 1 步：拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 第 2 步：使用 Node.js 脚本从 Notion 同步
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create and run sync script
        run: |
          npm install @notionhq/client notion-to-md
          cat <<'EOF' | node -
          const { Client } = require("@notionhq/client");
          const { NotionToMarkdown } = require("notion-to-md");
          const fs = require("fs/promises");
          const path = require("path");

          const notion = new Client({ auth: process.env.NOTION_TOKEN });
          const n2m = new NotionToMarkdown({ notionClient: notion });
          const databaseId = process.env.NOTION_DATABASE_ID;
          const outputDir = "content/posts";

          async function sync() {
            console.log(`Ensuring a clean sync by removing old content from ${outputDir}...`);
            await fs.rm(outputDir, { recursive: true, force: true });
            await fs.mkdir(outputDir, { recursive: true });

            console.log("Fetching pages from Notion database...");
            const response = await notion.databases.query({
              database_id: databaseId,
              filter: { property: "status", select: { "equals": "Published" } },
            });

            console.log(`Found ${response.results.length} pages to sync.`);

            for (const page of response.results) {
              try {
                const title = page.properties.Title.title[0]?.plain_text || 'Untitled';
                const slug = page.properties.slug.rich_text[0]?.plain_text;
                const date = page.properties.date.date?.start;
                const tags = page.properties.tags.multi_select.map(tag => tag.name);

                if (!slug) {
                  console.warn(`Skipping page "${title}" because it has no slug.`);
                  continue;
                }
                console.log(`Processing: ${title}`);
                const mdblocks = await n2m.pageToMarkdown(page.id);
                const mdString = n2m.toMarkdownString(mdblocks);
                const frontmatter = `---
          title: "${title.replace(/"/g, '\\"')}"
          date: ${date}
          slug: "${slug}"
          tags: [${tags.map(t => `"${t}"`).join(', ')}]
          ---
          `;
                const finalContent = frontmatter + "\n" + mdString.parent;
                const outputPath = path.join(outputDir, `${slug}.md`);
                await fs.writeFile(outputPath, finalContent);
                console.log(`Successfully created ${outputPath}`);
              } catch (error) {
                console.error(`Failed to process page ID ${page.id}:`, error.message);
              }
            }
          }
          sync().catch(console.error);
          EOF
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_PAGE_URL }}

      # ===============================================================
      # 第 3 步 (全新方法): 安装转换工具并自动转换 HEIC 图片
      - name: Install ImageMagick and Convert HEIC Images
        run: |
          # 更新包列表并安装 ImageMagick 和 HEIC 支持库
          sudo apt-get update
          sudo apt-get install -y imagemagick libheif-examples

          # 查找所有 .heic 或 .HEIC 文件并进行转换
          echo "Searching for HEIC files in ./static..."
          find ./static -type f \( -iname "*.heic" -o -iname "*.heif" \) -print0 | while IFS= read -r -d $'\0' file; do
            # 生成新的 jpeg 文件名
            new_file="${file%.*}.jpeg"
            echo "Converting '$file' to '$new_file'..."
            # 使用 convert 命令进行转换
            convert "$file" "$new_file"
            # 删除原始的 .heic 文件以节省空间
            rm "$file"
          done
          echo "HEIC conversion complete."

      # 第 4 步: 自动更新 Markdown 文件中的图片链接
      - name: Update Image Links in Markdown
        run: |
          echo "Updating image links in markdown files..."
          # 使用 find 和 sed 命令来替换链接 (i 表示不区分大小写, g 表示全局替换)
          find ./content/posts -type f -name "*.md" -exec sed -i 's/\.heic/.jpeg/gi' {} +
          find ./content/posts -type f -name "*.md" -exec sed -i 's/\.HEIC/.jpeg/gi' {} +
          echo "Image link updates complete."
      # ===============================================================

      # 第 5 步：将主题文件合并到根目录
      - name: Merge theme files
        run: |
          cp -rT themes/blowfish/layouts/ layouts/
          cp -rT themes/blowfish/assets/ assets/
      
      # 第 6 步：安装 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true 

      # 第 7 步：构建 Hugo 网站
      - name: Build
        run: hugo --minify

      # 第 8 步：上传构建好的网站工件
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # 第 9 步：部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      # 第 10 步：清除 Cloudflare 缓存
      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        with:
          purge_everything: true
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

